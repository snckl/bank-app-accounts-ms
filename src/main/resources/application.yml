server:
  port: 8010
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://localhost:3306/accountsdb
    username: root
    password: root
  jpa:
    show-sql: true     # Show the queries which are executed.
  sql:
    init:
      mode: always  # always execute schema.sql
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*" # Will allow us to refresh properties in runtime
                     # With this we can use actuator/refresh endpoint with POST method.So we can refresh.
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true # enable environment info related information
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    prefer-ip-address: true
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8070/eureka/
info:
  app:
    name: "accounts"
    description: "Bank accounts application"
    version: "1.0.0"

logging:
  level:
    com:
      cnsn:
        accounts: DEBUG

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 10
        permitted-number-of-calls-in-half-open-state: 2
        failure-rate-threshold: 50
        wait-duration-in-open-state:
          seconds: 10
  retry:
    configs:
      default:
        max-attempts: 3                  # max attempt
        wait-duration:
          seconds: 0.1                   # start wait duration
        exponential-max-wait-duration:
          seconds: 0.5                     # max wait duration
        enable-exponential-backoff: true # enable multiplying duration in every retry
        exponential-backoff-multiplier: 2 # Multiply wait duration by 2 in every step
        ignore-exceptions:
          - java.lang.NullPointerException
        # retry-exceptions:
        #  - java.util.concurrent.TimeoutException # while using retry exception we don't have to use ignore exceptions
  ratelimiter:
    configs:
      default:
        timeout-duration:
          seconds: 1
        limit-refresh-period:
          seconds: 5
        limit-for-period: 1




